{"version":3,"sources":["sorter/AlgoPicker/AlgoPicker.jsx","sorter/Slider/Slider.jsx","sorter/Utilities/sortingAlgorithmInfos.js","sorter/AlgoContainer/AlgoContainer.jsx","sorter/Utilities/sortingAlgorithms.js","sorter/SorterApp.jsx","App.jsx","index.jsx"],"names":["AlgoPicker","props","algorithms","selected","handleAlgorithmClick","map","algorithm","index","className","some","item","onClick","Slider","prompt","slider_value","slider_min","slider_max","slider_step","disabled","handleSliderChange","type","min","max","value","onChange","step","algorithmInfos","Bubble","worst","text","style","color","margin","best","average","description","Bucket","Heap","Insertion","Merge","Quick","Radix","Selection","AlgoContainer","name","array","sortingAlgorithm","delay","sortedContainers","setSortedContainers","dataIndex","localArray","blocksContainerRef","useRef","animateSort","forEach","barIndices","setTimeout","i","blocks","current","children","backgroundColor","animateComparison","indices","j","height","iHeight","jHeight","animateSwap","val","ref","width","length","insertionSort","animations","arr","n","push","swap","index1","index2","temp","ALGORITHMS","quickSort","start","end","partition","pivotIdx","Math","floor","pivotVal","smallest","SorterApp","useState","setSelected","BLOCK_NUM_MAX","blockNumber","setBlockNumber","sortSpeed","setSortSpeed","setArray","resetArray","Array","random","useEffect","Object","keys","valIdx","indexOf","filter","_","includes","event","target","alert","slice","App","to","exact","path","React","Component","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.ebb71863.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./AlgoPicker.css\";\n\nfunction AlgoPicker(props) {\n  const { algorithms, selected, handleAlgorithmClick } = props;\n\n  return (\n    <>\n      <p>Algorithms:</p>\n      {algorithms.map((algorithm, index) => (\n        <button\n          className={\n            selected.some((item) => item === algorithm)\n              ? \"AlgoPicker-name AlgoPicker-active\"\n              : \"AlgoPicker-name AlgoPicker-inactive\"\n          }\n          key={index}\n          onClick={() => handleAlgorithmClick(algorithm)}\n        >\n          {`${algorithm} Sort`}\n        </button>\n      ))}\n    </>\n  );\n}\n\nexport default AlgoPicker;\n","import React from \"react\";\nimport \"./Slider.css\";\n\nfunction Slider(props) {\n  const {\n    prompt,\n    slider_value,\n    slider_min,\n    slider_max,\n    slider_step,\n    disabled,\n    handleSliderChange,\n  } = props;\n\n  return (\n    <>\n      <span>\n        {prompt}\n        {\n          <input\n            className=\"Slider-numberinput\"\n            type=\"number\"\n            min={slider_min}\n            max={slider_max}\n            value={slider_value}\n            disabled={disabled}\n            onChange={handleSliderChange}\n          />\n        }\n      </span>\n\n      <input\n        className={disabled ? \"Slider-slider Slider-disabled\" : \"Slider-slider\"}\n        type=\"range\"\n        min={slider_min}\n        max={slider_max}\n        step={slider_step}\n        value={slider_value}\n        disabled={disabled}\n        onChange={handleSliderChange}\n      />\n    </>\n  );\n}\n\nexport default Slider;\n","export const algorithmInfos = {\n  Bubble: {\n    worst: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    best: { text: \"O(n)\", style: { color: \"green\", margin: 0 } },\n    average: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    description: \"\",\n  },\n  Bucket: {\n    worst: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    best: { text: \"O(n+k)\", style: { color: \"green\", margin: 0 } },\n    average: { text: \"O(n+k)\", style: { color: \"green\", margin: 0 } },\n    description: \"\",\n  },\n  Heap: {\n    worst: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    best: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    average: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    description: \"\",\n  },\n  Insertion: {\n    worst: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    best: { text: \"O(n)\", style: { color: \"green\", margin: 0 } },\n    average: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    description: \"\",\n  },\n  Merge: {\n    worst: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    best: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    average: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    description: \"\",\n  },\n  Quick: {\n    worst: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    best: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    average: { text: \"O(n log(n))\", style: { color: \"darkorange\", margin: 0 } },\n    description: \"\",\n  },\n  Radix: {\n    worst: { text: \"O(nk)\", style: { color: \"green\", margin: 0 } },\n    best: { text: \"O(nk)\", style: { color: \"green\", margin: 0 } },\n    average: { text: \"O(nk)\", style: { color: \"green\", margin: 0 } },\n    description: \"\",\n  },\n  Selection: {\n    worst: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    best: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    average: { text: \"O(n\\u00B2)\", style: { color: \"red\", margin: 0 } },\n    description: \"\",\n  },\n};\n","import { React, useRef } from \"react\";\nimport \"./AlgoContainer.css\";\nimport { algorithmInfos } from \"../Utilities/sortingAlgorithmInfos\";\n\nfunction AlgoContainer(props) {\n  const {\n    name,\n    array,\n    sortingAlgorithm,\n    delay,\n    sortedContainers,\n    setSortedContainers,\n    dataIndex,\n  } = props;\n  let localArray = [...array];\n  const blocksContainerRef = useRef(null);\n\n  function animateSort(sortingAlgorithm, array) {\n    const animations = sortingAlgorithm(array);\n    animations.forEach(([barIndices, type], index) => {\n      setTimeout(() => {\n        if (type === \"comparison\") {\n          barIndices.map((i) => animateComparison(i));\n        } else if (type === \"swap\") {\n          animateSwap(barIndices);\n        }\n      }, index * delay);\n    });\n  }\n\n  function animateComparison(index) {\n    const blocks = blocksContainerRef.current.children;\n\n    setTimeout(() => {\n      const style = blocks[index].style;\n      style.backgroundColor = \"red\";\n    }, delay);\n    setTimeout(() => {\n      const style = blocks[index].style;\n      style.backgroundColor = \"\";\n    }, delay * 2);\n  }\n\n  function animateSwap(indices) {\n    const blocks = blocksContainerRef.current.children;\n    const [i, j] = indices;\n    const [iHeight, jHeight] = [blocks[i].style.height, blocks[j].style.height];\n\n    const iStyle = blocks[i].style;\n    iStyle.height = jHeight;\n    const jStyle = blocks[j].style;\n    jStyle.height = iHeight;\n  }\n\n  return (\n    <div className=\"AlgoContainer-container\">\n      <div className=\"AlgoContainer-info\">\n        <h3 className=\"AlgoContainer-tooltip\">\n          {`${name} Sort`}\n          <span className=\"AlgoContainer-tooltiptext\">\n            Worst Case:\n            <span style={algorithmInfos[name][\"worst\"][\"style\"]}>\n              {` ${algorithmInfos[name][\"worst\"][\"text\"]}`}\n            </span>\n            <br />\n            Best Case:\n            <span style={algorithmInfos[name][\"best\"][\"style\"]}>\n              {` ${algorithmInfos[name][\"best\"][\"text\"]}`}\n            </span>\n            <br />\n            Average:\n            <span style={algorithmInfos[name][\"average\"][\"style\"]}>\n              {` ${algorithmInfos[name][\"average\"][\"text\"]}`}\n            </span>\n            <br />\n            Description:\n            <span style={{ margin: 0 }}>\n              {` ${algorithmInfos[name][\"description\"]}`}\n            </span>\n          </span>\n        </h3>\n        <h5>0.00ms</h5>\n      </div>\n      <button\n        className={\n          sortedContainers[dataIndex]\n            ? \"AlgoContainer-runbutton AlgoContainer-disabled\"\n            : \"AlgoContainer-runbutton\"\n        }\n        disabled={sortedContainers[dataIndex]}\n        onClick={() => {\n          animateSort(sortingAlgorithm, localArray);\n          setSortedContainers(\n            sortedContainers.map((val, index) =>\n              index === dataIndex ? true : val\n            )\n          );\n        }}\n      >\n        Run\n      </button>\n\n      <div className=\"AlgoContainer-blocks\" ref={blocksContainerRef}>\n        {localArray.map((value, index) => (\n          <div\n            className=\"AlgoContainer-block\"\n            style={{\n              height: `${value}px`,\n              width: `${100 / localArray.length}%`,\n            }}\n            key={index}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default AlgoContainer;\n","// good\nexport function bubbleSort(array) {\n  // O(n^2)\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  let n = arr.length;\n  for (var i = 0; i < n - 1; i++) {\n    for (var j = 0; j < n - i - 1; j++) {\n      animations.push([[j, j + 1], \"comparison\"]);\n      if (arr[j] > arr[j + 1]) {\n        swap(arr, j, j + 1);\n        animations.push([[j, j + 1], \"swap\"]);\n      }\n    }\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function bucketSort(array) {\n  // O(n^2)\n  let arr = [...array]; // copy array to not change original\n\n  let min = arr[0];\n  let max = arr[0];\n  let bucketSize = 5;\n\n  arr.forEach((val) => {\n    if (val < min) {\n      min = val;\n    } else if (val > max) {\n      max = val;\n    }\n  });\n\n  // init buckets\n  let bucketCount = Math.floor((max - min) / bucketSize) + 1;\n  var buckets = new Array(bucketCount);\n\n  for (var i = 0; i < bucketCount; i++) {\n    buckets[i] = [];\n  }\n\n  // add values to buckets\n  arr.forEach((val) => {\n    buckets[Math.floor((val - min) / bucketSize)].push(val);\n  });\n\n  // sort buckets w/ insertionSort\n  let sortedArray = [];\n  buckets.forEach((bucket) => {\n    let sortedBucket = insertionSort(bucket);\n    sortedArray = sortedArray.concat(sortedBucket);\n  });\n\n  return sortedArray;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function heapSort(array) {\n  // O(n log(n))\n  let arr = [...array]; // copy array to not change original\n\n  const heapify = (arr, size, i) => {\n    let max = i;\n    let left = 2 * i + 1; // left child idx\n    let right = 2 * i + 2; // right child idx\n\n    // left child is not last and value is bigger than root\n    if (left < size && arr[left] > arr[max]) {\n      max = left;\n    }\n    // left child is not last and value is bigger than root\n    if (right < size && arr[right] > arr[max]) {\n      max = right;\n    }\n    if (max !== i) {\n      swap(arr, i, max);\n      heapify(arr, size, max);\n    }\n  };\n\n  let n = arr.length;\n  // create heap\n  for (var i = Math.floor(n / 2 - 1); i >= 0; i--) {\n    heapify(arr, n, i);\n  }\n\n  for (i = n - 1; i >= 0; i--) {\n    swap(arr, 0, i);\n    heapify(arr, i, 0);\n  }\n\n  return arr;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// good\nexport function insertionSort(array) {\n  // O(n^2)\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  let n = arr.length;\n  for (var i = 1; i < n; i++) {\n    for (var j = i - 1; j > -1; j--) {\n      animations.push([[j, j + 1], \"comparison\"]);\n      if (arr[j] > arr[j + 1]) {\n        swap(arr, j, j + 1);\n        animations.push([[j, j + 1], \"swap\"]);\n      } else break;\n    }\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function mergeSort(array) {\n  // O(n log(n))\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  function merge(left, right) {\n    let arr = [];\n\n    while (left.length && right.length) {\n      if (left[0] < right[0]) {\n        arr.push(left.shift());\n      } else {\n        arr.push(right.shift());\n      }\n    }\n\n    return [...arr, ...left, ...right];\n  }\n\n  const mid = arr.length / 2;\n\n  if (arr.length < 2) {\n    return arr;\n  }\n\n  const left = arr.splice(0, mid); // right = arr\n  return merge(mergeSort(left), mergeSort(arr));\n}\n\n/* -------------------------------------------------------------------------- */\n\n// good\nexport function quickSort(\n  array,\n  start = 0,\n  end = array.length - 1,\n  animations = []\n) {\n  // O(n^2)\n  let arr = [...array]; // copy array to not change original\n\n  // recursive implementation\n  const partition = (arr, start, end, animations) => {\n    const pivotIdx = Math.floor((start + end) / 2);\n    const pivotVal = arr[pivotIdx];\n    while (start <= end) {\n      while (arr[start] < pivotVal) {\n        animations.push([[start, pivotIdx], \"comparison\"]);\n        start++;\n      }\n      while (arr[end] > pivotVal) {\n        animations.push([[end, pivotIdx], \"comparison\"]);\n        end--;\n      }\n      animations.push([[start, end], \"comparison\"]);\n      if (start <= end) {\n        swap(arr, start, end);\n        animations.push([[start, end], \"swap\"]);\n\n        start++;\n        end--;\n      }\n    }\n    return start;\n  };\n\n  if (start >= end) {\n    return;\n  }\n  let index = partition(arr, start, end, animations);\n\n  if (start < index - 1) {\n    quickSort(arr, start, index - 1, animations);\n  }\n  if (index < end) {\n    quickSort(arr, index, end, animations);\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function radixSort(array) {\n  // O(nk)\n  let arr = [...array]; // copy array to not change original\n\n  const getNum = (val, idx) => {\n    const strNum = val.toString();\n    let end = strNum.length - 1;\n    const num = strNum[end - idx];\n    return num === undefined ? 0 : num;\n  };\n  const longestNum = (arr) => {\n    let longest = \"0\";\n    arr.forEach((num) => {\n      const strNum = num.toString();\n      if (strNum.length > longest.length) {\n        longest = strNum;\n      }\n    });\n    return longest.length;\n  };\n\n  let maxLength = longestNum(arr);\n  for (var i = 0; i < maxLength; i++) {\n    const bucketCount = 10;\n    var buckets = new Array(bucketCount);\n    for (var k = 0; k < bucketCount; k++) {\n      buckets[k] = [];\n    }\n\n    for (var j = 0; j < arr.length; j++) {\n      let num = getNum(arr[j], i);\n      if (num !== undefined) {\n        buckets[num].push(arr[j]);\n      }\n    }\n    arr = buckets.flat();\n  }\n\n  return arr;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// good\nexport function selectionSort(array) {\n  // O(n^2)\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  // O(n^2)\n  let n = arr.length;\n  for (var i = 0; i < n; i++) {\n    let smallest = i;\n    for (var j = i + 1; j < n; j++) {\n      animations.push([[j, smallest], \"comparison\"]);\n      if (arr[j] < arr[smallest]) {\n        smallest = j;\n      }\n    }\n    if (smallest !== i) {\n      swap(arr, i, smallest);\n      animations.push([[i, smallest], \"swap\"]);\n    }\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\nfunction swap(array, index1, index2) {\n  const temp = array[index1];\n  array[index1] = array[index2];\n  array[index2] = temp;\n}\n","import React, { useState, useEffect } from \"react\";\nimport AlgoPicker from \"./AlgoPicker/AlgoPicker.jsx\";\nimport Slider from \"./Slider/Slider.jsx\";\nimport AlgoContainer from \"./AlgoContainer/AlgoContainer.jsx\";\nimport {\n  bubbleSort,\n  bucketSort,\n  heapSort,\n  insertionSort,\n  mergeSort,\n  quickSort,\n  radixSort,\n  selectionSort,\n} from \"./Utilities/sortingAlgorithms\";\nimport \"./SorterApp.css\";\n\nconst BLOCK_NUM_MIN = 10;\nconst BLOCK_NUM_MAX = 500;\nconst BLOCK_NUM_STEP = 10;\nconst BLOCK_NUM_DEFAULT = BLOCK_NUM_MAX / 2;\n\nconst SORT_SPEED_MIN = 1;\nconst SORT_SPEED_MAX = 100;\nconst SORT_SPEED_STEP = 1;\nconst SORT_SPEED_DEFAULT = SORT_SPEED_MAX;\n\nconst MIN_BLOCK_LENGTH = 10;\nconst MAX_BLOCK_LENGTH = 500;\n\nconst ALGORITHMS = {\n  Bubble: bubbleSort,\n  // Bucket: bucketSort,\n  // Heap: heapSort,\n  Insertion: insertionSort,\n  // Merge: mergeSort,\n  Quick: quickSort,\n  // Radix: radixSort,\n  Selection: selectionSort,\n};\n\nfunction SorterApp() {\n  const [selected, setSelected] = useState([]);\n  const [blockNumber, setBlockNumber] = useState(BLOCK_NUM_DEFAULT);\n  const [sortSpeed, setSortSpeed] = useState(SORT_SPEED_DEFAULT);\n  const [array, setArray] = useState([]);\n  const [sortedContainers, setSortedContainers] = useState([]);\n\n  useEffect(resetArray, []);\n\n  function handleAlgorithmClick(value) {\n    if (selected.some((item) => item === value)) {\n      const valIdx = selected.indexOf(value);\n      setSelected(selected.filter((_, index) => index !== valIdx));\n      setSortedContainers(\n        sortedContainers.filter((_, index) => index !== valIdx)\n      );\n    } else {\n      setSelected([...selected, value]);\n      setSortedContainers([...sortedContainers, false]);\n    }\n  }\n\n  function handleBlockNumChange(event) {\n    setBlockNumber(event.target.value);\n  }\n\n  function handleSpeedChange(event) {\n    setSortSpeed(event.target.value);\n  }\n\n  function resetArray() {\n    setArray(\n      [...Array(BLOCK_NUM_MAX)].map(() =>\n        Math.floor(Math.random() * MAX_BLOCK_LENGTH)\n      )\n    );\n  }\n\n  return (\n    <>\n      <div className=\"SorterApp-header\">\n        <h1 className=\"SorterApp-title\">Sorter</h1>\n        <div className=\"SorterApp-headerbuttons\">\n          <div className=\"left\">\n            <div className=\"SorterApp-algopickercontainer\">\n              <AlgoPicker\n                algorithms={Object.keys(ALGORITHMS)}\n                selected={selected}\n                handleAlgorithmClick={handleAlgorithmClick}\n              />\n            </div>\n            <div className=\"SorterApp-slidercontainer\">\n              <Slider\n                prompt=\"Number of Blocks: \"\n                slider_value={blockNumber}\n                slider_min={BLOCK_NUM_MIN}\n                slider_max={BLOCK_NUM_MAX}\n                slider_step={BLOCK_NUM_STEP}\n                disabled={sortedContainers.includes(true)}\n                handleSliderChange={handleBlockNumChange}\n              />\n            </div>\n            <div className=\"SorterApp-slidercontainer\">\n              <Slider\n                prompt=\"Sorting Speed: \"\n                slider_value={sortSpeed}\n                slider_min={SORT_SPEED_MIN}\n                slider_max={SORT_SPEED_MAX}\n                slider_step={SORT_SPEED_STEP}\n                disabled={sortedContainers.includes(true)}\n                handleSliderChange={handleSpeedChange}\n              />\n            </div>\n          </div>\n\n          <div className=\"right\">\n            <div className=\"SorterApp-buttonscontainer\">\n              <button\n                className={\n                  sortedContainers.includes(true)\n                    ? \"SorterApp-button run disabled\"\n                    : \"SorterApp-button run\"\n                }\n                disabled={sortedContainers.includes(true)} // todo: here\n                onClick={() => {\n                  alert(\"doesn't work (yet)... run individually\");\n                }}\n              >\n                Run All\n              </button>\n              <button\n                className={\n                  !sortedContainers.includes(true)\n                    ? \"SorterApp-button reset disabled\"\n                    : \"SorterApp-button reset\"\n                }\n                disabled={!sortedContainers.includes(true)}\n                onClick={() => {\n                  resetArray();\n                  setSortedContainers(sortedContainers.map(() => false));\n                }}\n              >\n                Reset All\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      {selected.length ? (\n        selected.map((algorithm, index) => (\n          <AlgoContainer\n            name={algorithm}\n            array={array.slice(0, blockNumber)}\n            sortingAlgorithm={ALGORITHMS[algorithm]}\n            delay={100 - sortSpeed + 1}\n            sortedContainers={sortedContainers}\n            setSortedContainers={setSortedContainers}\n            dataIndex={index}\n            key={algorithm}\n          />\n        ))\n      ) : (\n        <div className=\"SorterApp-bodyplaceholder\">\n          Select Algorithm(s) to add\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default SorterApp;\n","import React from \"react\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport SorterApp from \"./sorter/SorterApp\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-nav\">\n          <Link to=\"/\" className=\"link\">\n            Home\n          </Link>\n          <Link to=\"/sorter\" className=\"link\">\n            Sorter\n          </Link>\n          <Link to=\"/pathfinder\" className=\"link\">\n            Pathfinder\n          </Link>\n        </div>\n        <Switch>\n          <Route exact path=\"/\">\n            <div>\n              <h2>Home</h2>\n            </div>\n          </Route>\n          <Route path=\"/sorter\">\n            <SorterApp />\n          </Route>\n          <Route path=\"/pathfinder\">\n            <div>\n              <h2>Pathfinder</h2>\n            </div>\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/algorithms\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}