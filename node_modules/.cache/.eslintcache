[{"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/index.jsx":"1","/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/App.jsx":"2","/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/SorterApp.jsx":"3","/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/AlgoPicker/AlgoPicker.jsx":"4","/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/AlgoContainer/AlgoContainer.jsx":"5","/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/Slider/Slider.jsx":"6","/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/sortingAlgorithms.js":"7"},{"size":335,"mtime":1619495451585,"results":"8","hashOfConfig":"9"},{"size":943,"mtime":1619495758822,"results":"10","hashOfConfig":"9"},{"size":5125,"mtime":1619827382284,"results":"11","hashOfConfig":"9"},{"size":643,"mtime":1619502087205,"results":"12","hashOfConfig":"9"},{"size":2483,"mtime":1619823402144,"results":"13","hashOfConfig":"9"},{"size":899,"mtime":1619822621209,"results":"14","hashOfConfig":"9"},{"size":6618,"mtime":1619593047423,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"2tpx36",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/index.jsx",[],["32","33"],"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/App.jsx",[],"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/SorterApp.jsx",["34"],"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/AlgoPicker/AlgoPicker.jsx",[],"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/AlgoContainer/AlgoContainer.jsx",["35"],"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/Slider/Slider.jsx",[],"/Users/marcusgee/Desktop/Projects.nosync/algorithms/src/sorter/sortingAlgorithms.js",["36"],"// good\nexport function bubbleSort(array) {\n  // O(n^2)\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  let n = arr.length;\n  for (var i = 0; i < n - 1; i++) {\n    for (var j = 0; j < n - i - 1; j++) {\n      animations.push([[j, j + 1], \"comparison\"]);\n      if (arr[j] > arr[j + 1]) {\n        swap(arr, j, j + 1);\n        animations.push([[j, j + 1], \"swap\"]);\n      }\n    }\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function bucketSort(array) {\n  // O(n^2)\n  let arr = [...array]; // copy array to not change original\n\n  let min = arr[0];\n  let max = arr[0];\n  let bucketSize = 5;\n\n  arr.forEach((val) => {\n    if (val < min) {\n      min = val;\n    } else if (val > max) {\n      max = val;\n    }\n  });\n\n  // init buckets\n  let bucketCount = Math.floor((max - min) / bucketSize) + 1;\n  var buckets = new Array(bucketCount);\n\n  for (var i = 0; i < bucketCount; i++) {\n    buckets[i] = [];\n  }\n\n  // add values to buckets\n  arr.forEach((val) => {\n    buckets[Math.floor((val - min) / bucketSize)].push(val);\n  });\n\n  // sort buckets w/ insertionSort\n  let sortedArray = [];\n  buckets.forEach((bucket) => {\n    let sortedBucket = insertionSort(bucket);\n    sortedArray = sortedArray.concat(sortedBucket);\n  });\n\n  return sortedArray;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function heapSort(array) {\n  // O(n log(n))\n  let arr = [...array]; // copy array to not change original\n\n  const heapify = (arr, size, i) => {\n    let max = i;\n    let left = 2 * i + 1; // left child idx\n    let right = 2 * i + 2; // right child idx\n\n    // left child is not last and value is bigger than root\n    if (left < size && arr[left] > arr[max]) {\n      max = left;\n    }\n    // left child is not last and value is bigger than root\n    if (right < size && arr[right] > arr[max]) {\n      max = right;\n    }\n    if (max !== i) {\n      swap(arr, i, max);\n      heapify(arr, size, max);\n    }\n  };\n\n  let n = arr.length;\n  // create heap\n  for (var i = Math.floor(n / 2 - 1); i >= 0; i--) {\n    heapify(arr, n, i);\n  }\n\n  for (i = n - 1; i >= 0; i--) {\n    swap(arr, 0, i);\n    heapify(arr, i, 0);\n  }\n\n  return arr;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// good\nexport function insertionSort(array) {\n  // O(n^2)\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  let n = arr.length;\n  for (var i = 1; i < n; i++) {\n    for (var j = i - 1; j > -1; j--) {\n      animations.push([[j, j + 1], \"comparison\"]);\n      if (arr[j] > arr[j + 1]) {\n        swap(arr, j, j + 1);\n        animations.push([[j, j + 1], \"swap\"]);\n      } else break;\n    }\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function mergeSort(array) {\n  // O(n log(n))\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  function merge(left, right) {\n    let arr = [];\n\n    while (left.length && right.length) {\n      if (left[0] < right[0]) {\n        arr.push(left.shift());\n      } else {\n        arr.push(right.shift());\n      }\n    }\n\n    return [...arr, ...left, ...right];\n  }\n\n  const mid = arr.length / 2;\n\n  if (arr.length < 2) {\n    return arr;\n  }\n\n  const left = arr.splice(0, mid); // right = arr\n  return merge(mergeSort(left), mergeSort(arr));\n}\n\n/* -------------------------------------------------------------------------- */\n\n// good\nexport function quickSort(\n  array,\n  start = 0,\n  end = array.length - 1,\n  animations = []\n) {\n  // O(n^2)\n  let arr = [...array]; // copy array to not change original\n\n  // recursive implementation\n  const partition = (arr, start, end, animations) => {\n    const pivotIdx = Math.floor((start + end) / 2);\n    const pivotVal = arr[pivotIdx];\n    while (start <= end) {\n      while (arr[start] < pivotVal) {\n        animations.push([[start, pivotIdx], \"comparison\"]);\n        start++;\n      }\n      while (arr[end] > pivotVal) {\n        animations.push([[end, pivotIdx], \"comparison\"]);\n        end--;\n      }\n      animations.push([[start, end], \"comparison\"]);\n      if (start <= end) {\n        swap(arr, start, end);\n        animations.push([[start, end], \"swap\"]);\n\n        start++;\n        end--;\n      }\n    }\n    return start;\n  };\n\n  if (start >= end) {\n    return;\n  }\n  let index = partition(arr, start, end, animations);\n\n  if (start < index - 1) {\n    quickSort(arr, start, index - 1, animations);\n  }\n  if (index < end) {\n    quickSort(arr, index, end, animations);\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// todo: add animations\nexport function radixSort(array) {\n  // O(nk)\n  let arr = [...array]; // copy array to not change original\n\n  const getNum = (val, idx) => {\n    const strNum = val.toString();\n    let end = strNum.length - 1;\n    const num = strNum[end - idx];\n    return num === undefined ? 0 : num;\n  };\n  const longestNum = (arr) => {\n    let longest = \"0\";\n    arr.forEach((num) => {\n      const strNum = num.toString();\n      if (strNum.length > longest.length) {\n        longest = strNum;\n      }\n    });\n    return longest.length;\n  };\n\n  let maxLength = longestNum(arr);\n  for (var i = 0; i < maxLength; i++) {\n    const bucketCount = 10;\n    var buckets = new Array(bucketCount);\n    for (var k = 0; k < bucketCount; k++) {\n      buckets[k] = [];\n    }\n\n    for (var j = 0; j < arr.length; j++) {\n      let num = getNum(arr[j], i);\n      if (num !== undefined) {\n        buckets[num].push(arr[j]);\n      }\n    }\n    arr = buckets.flat();\n  }\n\n  return arr;\n}\n\n/* -------------------------------------------------------------------------- */\n\n// good\nexport function selectionSort(array) {\n  // O(n^2)\n  let animations = [];\n  let arr = [...array]; // copy array to not change original\n\n  // O(n^2)\n  let n = arr.length;\n  for (var i = 0; i < n; i++) {\n    let smallest = i;\n    for (var j = i + 1; j < n; j++) {\n      animations.push([[j, smallest], \"comparison\"]);\n      if (arr[j] < arr[smallest]) {\n        smallest = j;\n      }\n    }\n    if (smallest !== i) {\n      swap(arr, i, smallest);\n      animations.push([[i, smallest], \"swap\"]);\n    }\n  }\n\n  return animations;\n}\n\n/* -------------------------------------------------------------------------- */\n\nfunction swap(array, index1, index2) {\n  const temp = array[index1];\n  array[index1] = array[index2];\n  array[index2] = temp;\n}\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":27,"column":7,"nodeType":"43","messageId":"44","endLine":27,"endColumn":23},{"ruleId":"41","severity":1,"message":"45","line":1,"column":25,"nodeType":"43","messageId":"44","endLine":1,"endColumn":34},{"ruleId":"41","severity":1,"message":"46","line":130,"column":7,"nodeType":"43","messageId":"44","endLine":130,"endColumn":17},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'MIN_BLOCK_LENGTH' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'animations' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]